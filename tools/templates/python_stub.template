
from dataclasses import dataclass
from typing import NamedTuple, Optional, Tuple

from numpy.typing import NDArray

@dataclass(frozen=True)
class ${IndicatorName}State:
    """State for the ${IndicatorName} computation"""
    # TODO: DEFINE STATE ATTRIBUTES
    ...

class ${IndicatorName}Result(NamedTuple):
    """Result of the ${IndicatorName} computation"""
    # TODO: DEFINE RESULTS OUTPUTS ATTRIBUTES
    state: ${IndicatorName}State

def ${indicator_name}(
    # TODO: DEFINE ARGUMENTS INPUTS
    release_gil: bool = False
) -> ${IndicatorName}Result | Tuple[NDArray, ${IndicatorName}State]:
    # TODO: FILL THE DOCUMENTATION
    """
    ${IndicatorName}: ...
    ----------
    TODO: DESCRIPTION

    Parameters
    ----------
    TODO:ARG_NAME : TODO:ARG_TYPE
        TODO:DESCRIPTION

    release_gil : bool, default False
        If ``True``, the GIL is released during the computation.
        This is useful when using this function in a multi-threaded context.

    Returns
    -------
    ${IndicatorName}Result
        A named tuple containing the result of the ${IndicatorName} computation.
        - ... TODO:OUTPUTS
        - state: **${IndicatorName}State** with (TODO:ATTRIBUTES)
    """
    ...

def ${indicator_name}_next(
    # TODO: DEFINE ARGUMENTS INPUTS
    state: ${IndicatorName}State
) -> ${IndicatorName}State:
    """
    Update the ${IndicatorName} state with the next data.

    Parameters
    ----------
    TODO:ARG_NAME : TODO:ARG_TYPE
        TODO:DESCRIPTION
    
    state : ${IndicatorName}State
        The current state of the ${IndicatorName} computation.

    Returns
    -------
    ${IndicatorName}State
        The updated state after including the new value.
    """
    ...