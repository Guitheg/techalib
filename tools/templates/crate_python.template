use numpy::{IntoPyArray, PyArray1, PyArrayMethods, PyReadonlyArray1, PyUntypedArrayMethods};
use pyo3::{pymethods, exceptions::PyValueError, pyclass, pyfunction, Py, PyResult, Python};
use techalysis::indicators::${indicator_name}::{${indicator_name}_into, ${IndicatorName}State};
use techalysis::types::Float;

#[pyclass(name = "${IndicatorName}State")]
#[derive(Debug, Clone)]
pub struct Py${IndicatorName}State {
    // TODO: DEFINE ATTRIBUTES
    // #[pyo3(get)]
    // pub ...
}
#[pymethods]
impl Py${IndicatorName}State {
    #[new]
    pub fn new(
        // TODO: DEFINE ARGUMENTS FOR NEW
    ) -> Self {
        Py${IndicatorName}State {
            // TODO: STATE ATTRIBUTES
        }
    }
    #[getter]
    pub fn __str__(&self) -> String {
        self.__repr__()
    }
    #[getter]
    pub fn __repr__(&self) -> String {
        // TODO: IMPLEMENTS TO_STRING
    }
}
impl From<${IndicatorName}State> for Py${IndicatorName}State {
    fn from(state: ${IndicatorName}State) -> Self {
        Py${IndicatorName}State {
            // TODO: STATE ATTRIBUTES
        }
    }
}

impl From<Py${IndicatorName}State> for ${IndicatorName}State {
    fn from(py_state: Py${IndicatorName}State) -> Self {
        ${IndicatorName}State {
            // TODO: STATE ATTRIBUTES
        }
    }
}

// TODO: DEFINE SIGNATURE
#[pyfunction(signature = (/*SIGNATURE_HERE*/))]
pub(crate) fn ${indicator_name}(
    py: Python,
    // TODO: DEFINE INPUT ARGUMENTS
    release_gil: bool,
) -> PyResult<(
    // TODO: DEFINE OUTPUTS
    Py${IndicatorName}State
)> {
    // TODO: GET INPUT DATA
    // let len = data.len();
    // let input_slice = data.as_slice()?;

    if release_gil {
        // TODO: DEFINE OUTPUTS
        // let mut output = vec![0.0; len];
        
        // TODO: IMPL WITH GIL RELEASE
        // let state = py
        //     .allow_threads(|| ${indicator_name}_into(input_slice, ..., output.as_mut_slice()))
        //     .map_err(|e| PyValueError::new_err(format!("{:?}", e)))?;

        // TODO: RETURN OUTPUTS
        // Ok((
        //     output.into_pyarray(py).into(),
        //     state.into()
        // ))
    } else {
        // TODO: DEFINE OUTPUTS (PYTHON HEAP)
        // let py_array_out = PyArray1::<Float>::zeros(py, [len], false);
        // let py_array_ptr = unsafe { py_array_out.as_slice_mut()? };

        // TODO: IMPL WITHOUT GIL RELEASE
        // let state = ${indicator_name}_into(input_slice, ..., py_array_ptr)
        //     .map_err(|e| PyValueError::new_err(format!("{:?}", e)))?;

        // TODO: RETURN OUTPUTS
        // Ok((
        //     py_array_out.into(),
        //     state.into()
        // ))
    }
}

// TODO: DEFINE SIGNATURE AND INPUT ARGUMENTS
#[pyfunction(signature = (/*SIGNATURE HERE*/, ${indicator_name}_state))]
pub(crate) fn ${indicator_name}_next(
    /*INPUT ARGUMENTS HERE*/
    ${indicator_name}_state: Py${IndicatorName}State
) -> PyResult<Py${IndicatorName}State> {
    let ${indicator_name}_state: ${IndicatorName}State = ${indicator_name}_state.into();
    let ${indicator_name}_state = ${indicator_name}_state
        .next(/*INPUT ARGUMENTS HERE*/)
        .map_err(|e| PyValueError::new_err(format!("{:?}", e)))?;

    Ok(${indicator_name}_state.into())
}
