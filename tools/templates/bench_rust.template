use criterion::BenchmarkId;
use rand::{rngs::StdRng, Rng, SeedableRng};
use techalysis::{indicators::${indicator_name}::${indicator_name}, types::Float};

fn bench_${indicator_name}(c: &mut criterion::Criterion) {
    let mut bench_group = c.benchmark_group("${indicator_name}");

    // TODO: DEFINE THE CASES
    let cases = vec![
        (
            50_000,
            30,
            // TODO: INPUT ARGS VALUES
        ),
        (
            1_000_000,
            30,
            // TODO: INPUT ARGS VALUES
        )
    ];

    for (
        len,
        period,
        // TODO: INPUT ARGS VALUES
    ) in cases {

        let mut rng = StdRng::seed_from_u64(period as u64);

        // TODO: INITIALIZE THE INPUT DATA
        let data: Vec<Float> = (0..len).map(|_| rng.random_range(0.0..100.0)).collect();

        bench_group.bench_with_input(
            BenchmarkId::new(format!("len={len}"), period), // TODO: ADD ARGS HERE
            &period,
            |b, &period| {
                b.iter(|| {
                    let _ = ${indicator_name}(&data, period); // TODO: ADD ARGS
                })
            },
        );
    }
}

criterion::criterion_group!(bench, bench_${indicator_name});
