import numpy as np
import timeit
from . import print_benchmark
import techalib as tx
import talib

def benchmark_${indicator_name}():
    ${Bench_Init_Param}

    iterations = 50
    ${Bench_Data_Init_5M}

    duration = timeit.timeit(lambda: talib.${INDICATORNAME}(${Bench_Data_Args}), number=iterations)
    average_time_c = duration / iterations

    duration = timeit.timeit(lambda: tx.${indicator_name}(${Bench_Data_Args}), number=iterations)
    average_time_rs = duration / iterations

    print_benchmark(iterations, {"length": ${Bench_Length}}, rust=average_time_rs, c=average_time_c)

    iterations = 50
    ${Bench_Data_Init_1M}

    duration = timeit.timeit(lambda: talib.${INDICATORNAME}(${Bench_Data_Args}), number=iterations)
    average_time_c = duration / iterations

    duration = timeit.timeit(lambda: tx.${indicator_name}(${Bench_Data_Args}), number=iterations)
    average_time_rs = duration / iterations

    print_benchmark(iterations, {"length": ${Bench_Length}}, rust=average_time_rs, c=average_time_c)

    iterations = 50
    ${Bench_Data_Init_50K}

    duration = timeit.timeit(lambda: talib.${INDICATORNAME}(${Bench_Data_Args}), number=iterations)
    average_time_c = duration / iterations

    duration = timeit.timeit(lambda: tx.${indicator_name}(${Bench_Data_Args}), number=iterations)
    average_time_rs = duration / iterations

    print_benchmark(iterations, {"length": ${Bench_Length}}, rust=average_time_rs, c=average_time_c)
